<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>开学有感</title>
      <link href="/kai-xue-you-gan.html"/>
      <url>/kai-xue-you-gan.html</url>
      
        <content type="html"><![CDATA[<h2 id="开学有感"><a href="#开学有感" class="headerlink" title="开学有感"></a>开学有感</h2><p>  今天是6.1日国际儿童节，特殊的假期已经过去，我们再次相聚校园一起学习，短短的一个月的时间我们要学习新知识，还要复习以前学习过的知识，这对我们和老师都是一个极大的考验，正如今天早晨校门口的车票起点：抗疫有我 延期起航 成长不停歇 终点站：奋斗有我 笃定前行 蓄力再出发 意思是在跟疫情作斗争的时候有我们，同时我们原本开学在2月17日调整到了6月1日，大约这个假期有140天左右了。这个假期是不是大部分同学都在每日“Timi” “大吉大利，今晚吃鸡”中度过？（其实我大概也是）但是时间不会自己回来，我们还可以再追回一点时间，用一个月把所有的新知识巩固复习。争取在告别母校升到初中的时候可以取得让自己满意的成绩，分到一个不错的班级着这也应了后半句话 奋斗有我 笃定前行 蓄力再出发<br>        鉴于我们每次创造的奇迹我相信我们应该可以做到吧<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8">🐶</span></p><h2 id="复学第一课视频观看"><a href="#复学第一课视频观看" class="headerlink" title="复学第一课视频观看"></a>复学第一课视频观看</h2><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"loop":"yes","screenshot":"yes","video":{"url":"/video/61.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <h2 id="课程表"><a href="#课程表" class="headerlink" title="课程表"></a>课程表</h2><table><thead><tr><th align="center">节次/时间</th><th align="center">周一</th><th align="center">周二</th><th align="center">周三</th><th align="center">周四</th><th align="center">周五</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">语文</td><td align="center">数学</td><td align="center">语文</td><td align="center">数学</td><td align="center">语文</td></tr><tr><td align="center">2</td><td align="center">数学</td><td align="center">语文</td><td align="center">数学</td><td align="center">语文</td><td align="center">数学</td></tr><tr><td align="center">3</td><td align="center">英语</td><td align="center">道法</td><td align="center">数学</td><td align="center">语文</td><td align="center">科学</td></tr><tr><td align="center">4</td><td align="center">语文</td><td align="center">英语</td><td align="center">语文</td><td align="center">道法</td><td align="center">英语</td></tr><tr><td align="center">5</td><td align="center">音乐</td><td align="center">美术</td><td align="center">体育</td><td align="center">英语</td><td align="center">语文</td></tr><tr><td align="center">6</td><td align="center">班会</td><td align="center">科学</td><td align="center">道法</td><td align="center">实践</td><td align="center">体育</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开学有感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疫情 </tag>
            
            <tag> 开学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac平台搭建属于自己的博客-HEXO</title>
      <link href="/mac-ping-tai-da-jian-shu-yu-zi-ji-de-bo-ke-hexo.html"/>
      <url>/mac-ping-tai-da-jian-shu-yu-zi-ji-de-bo-ke-hexo.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h3 id="我搭建博客有一段时间了，看到身边的人都想搭建一个属于自己的博客但是不会弄，我就把自己遇到的一些大坑总结并放上详细的步骤。声明：我只会发布Mac平台的搭建教程至于Win不会的，因为我身边都是黑苹果用户，而且我也是其中之一。"><a href="#我搭建博客有一段时间了，看到身边的人都想搭建一个属于自己的博客但是不会弄，我就把自己遇到的一些大坑总结并放上详细的步骤。声明：我只会发布Mac平台的搭建教程至于Win不会的，因为我身边都是黑苹果用户，而且我也是其中之一。" class="headerlink" title="我搭建博客有一段时间了，看到身边的人都想搭建一个属于自己的博客但是不会弄，我就把自己遇到的一些大坑总结并放上详细的步骤。声明：我只会发布Mac平台的搭建教程至于Win不会的，因为我身边都是黑苹果用户，而且我也是其中之一。"></a>我搭建博客有一段时间了，看到身边的人都想搭建一个属于自己的博客但是不会弄，我就把自己遇到的一些大坑总结并放上详细的步骤。声明：我只会发布Mac平台的搭建教程至于Win不会的，因为我身边都是黑苹果用户，而且我也是其中之一。</h3><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="所需要的工具并不多但是很繁琐而且还需要你去下载等待，最差的情况还有可能需要番茄，所需工具有Git-重点就是这个mac上没有单独的Git-Ui-而这个工具还正好集成在Xcode里-这时有人想说Brew不香吗直接用它安装Git不好吗，我只想说，呵呵，这货安装也要Git这不就是造轮子吗，对不对，综上所述直接安装Xcode-、安装node-js没有？没有的话点我下载最新版这就是我们需要的所有工具了，接下来开始更为详细的步骤。"><a href="#所需要的工具并不多但是很繁琐而且还需要你去下载等待，最差的情况还有可能需要番茄，所需工具有Git-重点就是这个mac上没有单独的Git-Ui-而这个工具还正好集成在Xcode里-这时有人想说Brew不香吗直接用它安装Git不好吗，我只想说，呵呵，这货安装也要Git这不就是造轮子吗，对不对，综上所述直接安装Xcode-、安装node-js没有？没有的话点我下载最新版这就是我们需要的所有工具了，接下来开始更为详细的步骤。" class="headerlink" title="所需要的工具并不多但是很繁琐而且还需要你去下载等待，最差的情况还有可能需要番茄，所需工具有Git(重点就是这个mac上没有单独的Git Ui,而这个工具还正好集成在Xcode里,这时有人想说Brew不香吗直接用它安装Git不好吗，我只想说，呵呵，这货安装也要Git这不就是造轮子吗，对不对，综上所述直接安装Xcode)、安装node.js没有？没有的话点我下载最新版这就是我们需要的所有工具了，接下来开始更为详细的步骤。"></a>所需要的工具并不多但是很繁琐而且还需要你去下载等待，最差的情况还有可能需要番茄，所需工具有Git(重点就是这个mac上没有单独的Git Ui,而这个工具还正好集成在Xcode里,这时有人想说Brew不香吗直接用它安装Git不好吗，我只想说，呵呵，这货安装也要Git这不就是造轮子吗，对不对，综上所述直接安装Xcode)、安装node.js没有？没有的话<a href="https://nodejs.org/dist/v12.16.3/node-v12.16.3.pkg" target="_blank" rel="noopener">点我下载最新版</a>这就是我们需要的所有工具了，接下来开始更为详细的步骤。</h2><h1 id="安装Hexo并部署"><a href="#安装Hexo并部署" class="headerlink" title="安装Hexo并部署"></a>安装Hexo并部署</h1><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><pre><code class="Bash">npm install -g hexo-cli</code></pre><h3 id="如下图所示如果发现了第二个箭头的报错，不用担心那只是提醒你更新输入"><a href="#如下图所示如果发现了第二个箭头的报错，不用担心那只是提醒你更新输入" class="headerlink" title="如下图所示如果发现了第二个箭头的报错，不用担心那只是提醒你更新输入"></a>如下图所示<img src="/mac-ping-tai-da-jian-shu-yu-zi-ji-de-bo-ke-hexo/1.png" alt="">如果发现了第二个箭头的报错，不用担心那只是提醒你更新输入</h3><pre><code class="Bash">npm install -g npm</code></pre><h3 id="即可更新了，更新完可以执行下一步了"><a href="#即可更新了，更新完可以执行下一步了" class="headerlink" title="即可更新了，更新完可以执行下一步了"></a>即可更新了，更新完可以执行下一步了</h3><h3 id="然后找一个地方新建一个文件夹叫Blog-这里我强烈推荐放到文稿或桌面上因为有iCloud备份以免……血的教训-然后右键服务-新建位于文件夹位置的终端窗口打开它如下图所示1"><a href="#然后找一个地方新建一个文件夹叫Blog-这里我强烈推荐放到文稿或桌面上因为有iCloud备份以免……血的教训-然后右键服务-新建位于文件夹位置的终端窗口打开它如下图所示1" class="headerlink" title="然后找一个地方新建一个文件夹叫Blog(这里我强烈推荐放到文稿或桌面上因为有iCloud备份以免……血的教训)然后右键服务-新建位于文件夹位置的终端窗口打开它如下图所示1"></a>然后找一个地方新建一个文件夹叫Blog(这里我强烈推荐放到文稿或桌面上因为有iCloud备份以免……血的教训)然后右键服务-新建位于文件夹位置的终端窗口打开它如下图所示1<a href="2.png"></a></h3><h3 id="现在会弹出一个终端页面你就进入了这个文件夹了，在终端输入"><a href="#现在会弹出一个终端页面你就进入了这个文件夹了，在终端输入" class="headerlink" title="现在会弹出一个终端页面你就进入了这个文件夹了，在终端输入"></a>现在会弹出一个终端页面<img src="/mac-ping-tai-da-jian-shu-yu-zi-ji-de-bo-ke-hexo/3.png" alt="">你就进入了这个文件夹了，在终端输入</h3><pre><code class="Bash">hexo init #在当前的文件夹创建Hexo</code></pre><h3 id="等待那烦人的Git下载速度吧，一切就绪后你会看到如下界面"><a href="#等待那烦人的Git下载速度吧，一切就绪后你会看到如下界面" class="headerlink" title="等待那烦人的Git下载速度吧，一切就绪后你会看到如下界面"></a>等待那烦人的Git下载速度吧，一切就绪后你会看到如下界面</h3><p><img src="/mac-ping-tai-da-jian-shu-yu-zi-ji-de-bo-ke-hexo/4.png" alt=""></p><h3 id="然后打开Blog文件夹，发现里面是这样的，如下图"><a href="#然后打开Blog文件夹，发现里面是这样的，如下图" class="headerlink" title="然后打开Blog文件夹，发现里面是这样的，如下图"></a>然后打开Blog文件夹，发现里面是这样的，如下图</h3><p><img src="/mac-ping-tai-da-jian-shu-yu-zi-ji-de-bo-ke-hexo/5.png" alt=""></p><h3 id="双击打开-config-yml里面是站点配置我把重要的写在里面截图给你们看，注意-在这里面代表注释的意思"><a href="#双击打开-config-yml里面是站点配置我把重要的写在里面截图给你们看，注意-在这里面代表注释的意思" class="headerlink" title="双击打开_config.yml里面是站点配置我把重要的写在里面截图给你们看，注意#在这里面代表注释的意思"></a>双击打开_config.yml里面是站点配置我把重要的写在里面截图给你们看，注意#在这里面代表注释的意思</h3><p><img src="/mac-ping-tai-da-jian-shu-yu-zi-ji-de-bo-ke-hexo/6.png" alt=""><br><img src="/mac-ping-tai-da-jian-shu-yu-zi-ji-de-bo-ke-hexo/7.png" alt=""><br><img src="/mac-ping-tai-da-jian-shu-yu-zi-ji-de-bo-ke-hexo/8.png" alt=""><br><img src="/mac-ping-tai-da-jian-shu-yu-zi-ji-de-bo-ke-hexo/9.png" alt=""></p><h3 id="以上就是站点配置文件的详情了其他的没标注是因为一般用不到"><a href="#以上就是站点配置文件的详情了其他的没标注是因为一般用不到" class="headerlink" title="以上就是站点配置文件的详情了其他的没标注是因为一般用不到"></a>以上就是站点配置文件的详情了其他的没标注是因为一般用不到</h3><h2 id="本地部署Hexo"><a href="#本地部署Hexo" class="headerlink" title="本地部署Hexo"></a>本地部署Hexo</h2><h3 id="把站点配置文件里的名字之类的修改为自己的，之后打开最开始的终端位于Blog文件夹的，输入"><a href="#把站点配置文件里的名字之类的修改为自己的，之后打开最开始的终端位于Blog文件夹的，输入" class="headerlink" title="把站点配置文件里的名字之类的修改为自己的，之后打开最开始的终端位于Blog文件夹的，输入"></a>把站点配置文件里的名字之类的修改为自己的，之后打开最开始的终端位于Blog文件夹的，输入</h3><pre><code class="Bash">hexo g &amp;&amp; hexo s # hexo g更新缓存 hexo s开启本地预览</code></pre><h3 id="之后终端会弹出一个网址右键打开URL"><a href="#之后终端会弹出一个网址右键打开URL" class="headerlink" title="之后终端会弹出一个网址右键打开URL"></a>之后终端会弹出一个网址右键打开URL</h3><p><img src="/mac-ping-tai-da-jian-shu-yu-zi-ji-de-bo-ke-hexo/10.png" alt=""></p><h3 id="打开以后就会弹出属于你自己的博客了，开不开心"><a href="#打开以后就会弹出属于你自己的博客了，开不开心" class="headerlink" title="打开以后就会弹出属于你自己的博客了，开不开心"></a>打开以后就会弹出属于你自己的博客了，开不开心</h3><p><img src="/mac-ping-tai-da-jian-shu-yu-zi-ji-de-bo-ke-hexo/11.png" alt=""></p><h3 id="这个就已经算初步的配置好了，接下来让我们来美化这个博客"><a href="#这个就已经算初步的配置好了，接下来让我们来美化这个博客" class="headerlink" title="这个就已经算初步的配置好了，接下来让我们来美化这个博客"></a>这个就已经算初步的配置好了，接下来让我们来美化这个博客</h3><h1 id="美化Hexo"><a href="#美化Hexo" class="headerlink" title="美化Hexo"></a>美化Hexo</h1><h2 id="安装matery主题"><a href="#安装matery主题" class="headerlink" title="安装matery主题"></a>安装matery主题</h2><h2 id="我就不再去重复造轮子了，直接引用该主题大佬的配置方法，如有不懂的在下方留言，我会详细解答！"><a href="#我就不再去重复造轮子了，直接引用该主题大佬的配置方法，如有不懂的在下方留言，我会详细解答！" class="headerlink" title="我就不再去重复造轮子了，直接引用该主题大佬的配置方法，如有不懂的在下方留言，我会详细解答！"></a>我就不再去重复造轮子了，直接引用该主题大佬的配置方法，如有不懂的在下方留言，我会详细解答！</h2><blockquote><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment</a>、<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 和 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a>、<a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 在线聊天功能。</li></ul><h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><p>感谢下面列出的贡献者，没有他们，hexo-theme-matery 不会这么完美。</p><ul><li><a href="https://github.com/HarborZeng" target="_blank" rel="noopener">@HarborZeng</a></li><li><a href="https://github.com/shw2018" target="_blank" rel="noopener">@shw2018</a></li><li><a href="https://github.com/L1cardo" target="_blank" rel="noopener">@L1cardo</a></li><li><a href="https://github.com/Five-great" target="_blank" rel="noopener">@Five-great</a></li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>当你看到这里的时候，应该已经有一个自己的 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown</a> 来写博客和文章。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master" target="_blank" rel="noopener">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>Git clone</code> 命令来下载:</p><pre><code class="bash">git clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code class="bash">hexo new page "categories"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre><code class="yaml">---title: categoriesdate: 2018-09-30 17:25:30type: "categories"layout: "categories"---</code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code class="bash">hexo new page "tags"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre><code class="yaml">---title: tagsdate: 2018-09-30 18:23:38type: "tags"layout: "tags"---</code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code class="bash">hexo new page "about"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre><code class="yaml">---title: aboutdate: 2018-09-30 17:25:30type: "about"layout: "about"---</code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code class="bash">hexo new page "contact"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre><code class="yaml">---title: contactdate: 2018-09-30 17:25:30type: "contact"layout: "contact"---</code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code class="bash">hexo new page "friends"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre><code class="yaml">---title: friendsdate: 2018-12-12 21:25:30type: "friends"layout: "friends"---</code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre><code class="json">[{    "avatar": "http://image.luokangyuan.com/1_qq_27922023.jpg",    "name": "码酱",    "introduction": "我不是大佬，只是在追寻大佬的脚步",    "url": "http://luokangyuan.com/",    "title": "前去学习"}, {    "avatar": "http://image.luokangyuan.com/4027734.jpeg",    "name": "闪烁之狐",    "introduction": "编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬",    "url": "https://blinkfox.github.io/",    "title": "前去学习"}, {    "avatar": "http://image.luokangyuan.com/avatar.jpg",    "name": "ja_rome",    "introduction": "平凡的脚步也可以走出伟大的行程",    "url": "https://me.csdn.net/jlh912008548",    "title": "前去学习"}]</code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中查找   </p><pre><code class="yaml">menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle  Friends:    url: /friends    icon: fas fa-address-book</code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作<br>1.在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)<br>2.在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 <code>-</code>.<br>4.注意缩进格式  </p><pre><code class="yaml">menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle-o  Friends:    url: /friends    icon: fas fa-address-book  Medias:    icon: fas fa-list    children:      - name: Musics        url: /musics        icon: fas fa-music      - name: Movies        url: /movies        icon: fas fa-film      - name: Books        url: /books        icon: fas fa-book      - name: Galleries        url: /galleries        icon: fas fa-image</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre><code class="bash">npm i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre><code class="yaml">highlight:  enable: falseprism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:</code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre><code class="bash">npm install hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code class="yaml">search:  path: search.xml  field: post</code></pre><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre><code class="bash">npm i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code class="yaml">permalink_pinyin:  enable: true  separator: '-' # default: '-'</code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre><code class="bash">npm i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre><code class="yaml">postInfo:  date: true  update: false  wordCount: false # 设置文章字数统计为 true.  totalCount: false # 设置站点文章总字数统计为 true.  min2read: false # 阅读时长.  readCount: false # 阅读次数.</code></pre><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis" target="_blank" rel="noopener">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre><code class="bash">npm install hexo-filter-github-emojis --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code class="yaml">githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:</code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre><code class="bash">npm install hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code class="yaml">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: ' '  order_by: -date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre><code class="html">&lt;% if (theme.socialLink.github) { %&gt;    &lt;a href="&lt;%= theme.socialLink.github %&gt;" class="tooltipped" target="_blank" data-tooltip="访问我的GitHub" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-github"&gt;&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;</code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre><code class="yaml"># 是否在首页显示音乐music:  enable: true  title:             #非吸底模式有效    enable: true    show: 听听音乐  server: netease   #require music platform: netease, tencent, kugou, xiami, baidu  type: playlist    #require song, playlist, album, search, artist  id: 503838841     #require song id / playlist id / album id / search keyword  fixed: false      # 开启吸底模式  autoplay: false   # 是否自动播放  theme: '#42b983'  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: true  # 列表默认折叠</code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，<code>playlist</code>的<code>id</code>即为这串数字。</p></blockquote><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre><code class="yaml">---title: typora-vue-theme主题介绍date: 2020-05-20 17:20:00---</code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre><code class="yaml">---title: typora-vue-theme主题介绍date: 2020-05-20 17:20:00author: xiaoleGunimg: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---</code></pre><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="http://static.blinkfox.com/matery-20181202-1.png" alt="首页"></p><p><img src="http://static.blinkfox.com/matery-20181202-2.png" alt="首页推荐文章"></p><p><img src="http://static.blinkfox.com/matery-20181202-3.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-7.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-8.png" alt="首页文章列表"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre><code class="css">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */.bg-color {    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);}@-webkit-keyframes rainbow {   /* 动态切换背景颜色. */}@keyframes rainbow {    /* 动态切换背景颜色. */}</code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre><code class="javascript">$('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');</code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="版本记录"><a href="#版本记录" class="headerlink" title="版本记录"></a>版本记录</h2><ul><li>v1.3.0<ul><li>新增了支持子目录部署的功能（如：<code>Gitee</code>）；</li><li>新增了 <code>MiniValine</code> 评论系统；</li><li>新增了 <code>jsdelivr</code> 的支持；</li><li>修复了诸多发现的 bug；</li></ul></li><li>v1.2.2<ul><li>新增了自定义文章 <code>keywords</code> 的功能；</li><li>新增静态彩带点击切换的功能和配置；</li><li>将文章字数统计、彩带和站点运行时间等功能默认设置为 <code>false</code>；</li><li>修改了文章的 <code>description</code> 的 meta 属性优先读取文章的 <code>summary</code> 属性；</li><li>修改了文章标题的 HTML 标签，从 <code>div</code> 改成了 <code>h1</code> 标题；</li><li>修改了页脚年份显示不正确的问题；</li><li>去掉了站点运行时间中多余的 <code>setTimeout</code> 代码；</li></ul></li><li>v1.2.1<ul><li>新增了 TOC 的展开目录层级设置和滚动条功能，防止目录较多的时候目录溢出；</li><li>修改了首页的展示方式为以前的模式；</li><li>修复首页按钮没有边框的问题；</li><li>修复了音乐及吸底模式、视频、推荐文章等不激活时仍然生成首页卡片的问题；</li><li>修复 wordCount 插件未安装的问题，修改了部分配置；</li><li>修复音乐的 JSON 配置中有单引号的情况页面不显示的音乐的问题</li><li>修复标签云在Hexo4.0下链接失效的问题；</li></ul></li><li>v1.2.0<ul><li>新增了 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a>、<a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 的在线聊天功能；</li><li>新增了两级菜单的功能；</li><li>新增了打字效果的副标题；</li><li>新增了网页内容预加载的功能；</li><li>新增了首页 banner 是否每日切换的配置功能；</li><li>新增了显示 ICP 备案信息的功能，默认未开启；</li><li>新增了百度分析的配置；</li><li>新增了代码块的语言显示、一键复制、显示行号等功能；</li><li>新增了首页轮播图和推荐文章可自定义配置的功能；</li><li>新增了文章页面显示更新日期；</li><li>新增了转载规则的图标；</li><li>修改了分享的布局和显示方式；</li><li>升级更新了部分依赖库的版本；</li><li>其他细节修改和优化；</li></ul></li><li>v1.1.0<ul><li>新增了 <code>emoji</code> 的支持；</li><li>新增了站点运行时间统计及配置；</li><li>新增了留言板的功能,默认未开启；</li><li>新增了 <code>Twitter</code>、<code>Facebook</code>、知乎的社交链接；</li><li>更新了 <code>Valine</code> 的版本为最新版；</li><li>其他小细节的修改；</li></ul></li><li>v1.0.4<ul><li>新增了能为每篇文章都自定义转载规则的功能；</li><li>修复上一页、下一页的自定义 <code>summary</code> 不显示的问题；</li><li>修复了友情链接显示错位的问题，改为了瀑布流的布局方式；</li><li>其他小细节 bug 的修改；</li></ul></li><li>v1.0.3<ul><li>新增了<code>TOC</code>展开、收缩的按钮和相关配置，默认显示此按钮；</li></ul></li><li>v1.0.2<ul><li>升级了 <a href="https://materializecss.com/" target="_blank" rel="noopener">Materialize</a> 框架版本为<code>1.0.0</code>，重构和修改了升级过程中的部分文件或问题；</li><li>新增了首页封面的全屏轮播特效，可以将更重要的文章设置到首页轮播中；</li><li>修复首页第一个按钮是中文的问题</li><li>修复了 iPhone 上点击搜索输入获取焦点的问题；</li><li>修复了 iPhone 上输入框获取焦点后页面放大的问题；</li><li>修复一些文章或 UI 显示问题；</li></ul></li><li>v1.0.1<ul><li>调整 <code>css</code>、<code>js</code> 的文件请求路径在主题的<code>_config.yml</code>中配置，便于你更快捷的配置自己的 CDN；</li><li>新增代码是否折行为可配置，默认为折行；</li><li>默认激活 <code>TOC</code> 功能，并新增为某篇文章关闭 <code>TOC</code> 的 <code>Front-matter</code> 配置选项；</li><li>修复文章滚动时，高亮的目录选项不准确的问题；</li><li><code>IOS</code>下移除搜索框自动获得焦点属性，防止自动获得焦点后导致视图上移；</li></ul></li><li>v1.0.0<ul><li>新增了所有基础功能；</li></ul></li></ul><h1 id="使用Hexo"><a href="#使用Hexo" class="headerlink" title="使用Hexo"></a>使用Hexo</h1><h2 id="文章的基本写作方式"><a href="#文章的基本写作方式" class="headerlink" title="文章的基本写作方式"></a>文章的基本写作方式</h2><h3 id="Hexo博客采用的是Markdown语法来写作你的博客，基本的我来唠叨唠叨"><a href="#Hexo博客采用的是Markdown语法来写作你的博客，基本的我来唠叨唠叨" class="headerlink" title="Hexo博客采用的是Markdown语法来写作你的博客，基本的我来唠叨唠叨"></a>Hexo博客采用的是Markdown语法来写作你的博客，基本的我来唠叨唠叨</h3><h3 id="开头要写"><a href="#开头要写" class="headerlink" title="开头要写"></a>开头要写</h3><pre><code class="Markdown">---title: Mac平台搭建属于自己的博客-HEXO # 文章标题date: 2020-05-20 17:20:00 # 文章发布日期tage:  # 标签 Hexo博客 categories: # 分类 Hexo博客---</code></pre><h3 id="一个-空格-标题-使用Hexo一个-号空格代表标题-两个-空格代表副标题-三个-代表正文，如下图的格式"><a href="#一个-空格-标题-使用Hexo一个-号空格代表标题-两个-空格代表副标题-三个-代表正文，如下图的格式" class="headerlink" title="一个#空格 标题 使用Hexo一个#号空格代表标题 两个#空格代表副标题 三个###代表正文，如下图的格式"></a>一个#空格 标题 使用Hexo一个#号空格代表标题 两个#空格代表副标题 三个###代表正文，如下图的格式</h3><p><img src="/mac-ping-tai-da-jian-shu-yu-zi-ji-de-bo-ke-hexo/12.png" alt=""></p><h3 id="这是最最最基本的写作方式了，学会了这个你就可以写出一篇精致的文章了一起来领略Markdown语法的魅力吧"><a href="#这是最最最基本的写作方式了，学会了这个你就可以写出一篇精致的文章了一起来领略Markdown语法的魅力吧" class="headerlink" title="这是最最最基本的写作方式了，学会了这个你就可以写出一篇精致的文章了一起来领略Markdown语法的魅力吧"></a>这是最最最基本的写作方式了，学会了这个你就可以写出一篇精致的文章了一起来领略Markdown语法的魅力吧</h3><h2 id="文章内引用图片"><a href="#文章内引用图片" class="headerlink" title="文章内引用图片"></a>文章内引用图片</h2><h3 id="首先要安装一个插件"><a href="#首先要安装一个插件" class="headerlink" title="首先要安装一个插件"></a>首先要安装一个插件</h3><pre><code class="Bash">npm install hexo-asset-image --save</code></pre><h3 id="然后在站点目录修改-config-yml配置文件post-asset-folder项为true"><a href="#然后在站点目录修改-config-yml配置文件post-asset-folder项为true" class="headerlink" title="然后在站点目录修改_config.yml配置文件post_asset_folder项为true"></a>然后在站点目录修改_config.yml配置文件post_asset_folder项为true</h3><h3 id="引用的方法"><a href="#引用的方法" class="headerlink" title="引用的方法"></a>引用的方法</h3><pre><code class="Markdown">我真是太帅了自拍在下面![](13.png)  # 注意Markdown语法里的所有引用都需要使用英文输入,图片用数字命名</code></pre><h3 id="现在会写Markdown语法的文章了吧，再不会的话善用搜索引擎哟！"><a href="#现在会写Markdown语法的文章了吧，再不会的话善用搜索引擎哟！" class="headerlink" title="现在会写Markdown语法的文章了吧，再不会的话善用搜索引擎哟！"></a>现在会写Markdown语法的文章了吧，再不会的话善用搜索引擎哟！</h3><h1 id="上传Hexo到腾讯云COS或Github"><a href="#上传Hexo到腾讯云COS或Github" class="headerlink" title="上传Hexo到腾讯云COS或Github"></a>上传Hexo到腾讯云COS或Github</h1><h2 id="上传Hexo到腾讯云对象储存-COS-首推国内访问秒开"><a href="#上传Hexo到腾讯云对象储存-COS-首推国内访问秒开" class="headerlink" title="上传Hexo到腾讯云对象储存(COS) 首推国内访问秒开"></a>上传Hexo到腾讯云对象储存(COS) 首推国内访问秒开</h2><h3 id="注册腾讯云账号并创建储存桶"><a href="#注册腾讯云账号并创建储存桶" class="headerlink" title="注册腾讯云账号并创建储存桶"></a>注册腾讯云账号并创建储存桶</h3><h3 id="腾讯云官网传送门-点击该网址注册账号，并完成实名制，在控制台找到对象储存对象储存，创建储存桶。"><a href="#腾讯云官网传送门-点击该网址注册账号，并完成实名制，在控制台找到对象储存对象储存，创建储存桶。" class="headerlink" title="腾讯云官网传送门,点击该网址注册账号，并完成实名制，在控制台找到对象储存对象储存，创建储存桶。"></a><a href="https://cloud.tencent.com/" target="_blank" rel="noopener">腾讯云官网传送门</a>,点击该网址注册账号，并完成实名制，在控制台找到对象储存对象储存，创建储存桶。</h3><p><img src="/mac-ping-tai-da-jian-shu-yu-zi-ji-de-bo-ke-hexo/14.png" alt=""></p><h3 id="其中：名称随意；所属地域选择离你较近的，这样你的访问速度体验会更好；访问权限选择公有读私有写其他选项随意。"><a href="#其中：名称随意；所属地域选择离你较近的，这样你的访问速度体验会更好；访问权限选择公有读私有写其他选项随意。" class="headerlink" title="其中：名称随意；所属地域选择离你较近的，这样你的访问速度体验会更好；访问权限选择公有读私有写其他选项随意。"></a>其中：名称随意；所属地域选择离你较近的，这样你的访问速度体验会更好；访问权限选择公有读私有写其他选项随意。</h3><ul><li>开启静态网站<br><img src="/mac-ping-tai-da-jian-shu-yu-zi-ji-de-bo-ke-hexo/15.png" alt=""></li></ul><h3 id="按照上图指示配置好相关信息，至此将源码上传至该储存桶即可点击访问节点访问你的网站。"><a href="#按照上图指示配置好相关信息，至此将源码上传至该储存桶即可点击访问节点访问你的网站。" class="headerlink" title="按照上图指示配置好相关信息，至此将源码上传至该储存桶即可点击访问节点访问你的网站。"></a>按照上图指示配置好相关信息，至此将源码上传至该储存桶即可点击访问节点访问你的网站。</h3><ul><li>创建密钥<br>在控制台找到API密钥管理，创建密钥。</li></ul><h3 id="hexo插件安装及配置文件修改"><a href="#hexo插件安装及配置文件修改" class="headerlink" title="hexo插件安装及配置文件修改"></a>hexo插件安装及配置文件修改</h3><ul><li>安装插件<h3 id="在您的hexo项目目录下执行："><a href="#在您的hexo项目目录下执行：" class="headerlink" title="在您的hexo项目目录下执行："></a>在您的hexo项目目录下执行：</h3><pre><code class="Bash">npm install hexo-deployer-qcloud-cos --save</code></pre></li><li>配置文件修改<h3 id="在本地我们找到安装博客的文件夹，打开-config-yml文件，此处推荐sublimetext编辑器打开。"><a href="#在本地我们找到安装博客的文件夹，打开-config-yml文件，此处推荐sublimetext编辑器打开。" class="headerlink" title="在本地我们找到安装博客的文件夹，打开/_config.yml文件，此处推荐sublimetext编辑器打开。"></a>在本地我们找到安装博客的文件夹，打开/_config.yml文件，此处推荐sublimetext编辑器打开。</h3><h3 id="编辑这一块的代码："><a href="#编辑这一块的代码：" class="headerlink" title="编辑这一块的代码："></a>编辑这一块的代码：</h3><pre><code class="Yml"># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:type: qcloud-coscosRegion: ap-chengducosSecretId: cosSecretKey: cosBucket: work-blogcosAppid:  1257072316remotePath: </code></pre><h3 id="其中type：照填。"><a href="#其中type：照填。" class="headerlink" title="其中type：照填。"></a>其中type：照填。</h3><h3 id="cosRegion：根据你选择的位置填写。（可从储存桶基本信息所属地域查看）"><a href="#cosRegion：根据你选择的位置填写。（可从储存桶基本信息所属地域查看）" class="headerlink" title="cosRegion：根据你选择的位置填写。（可从储存桶基本信息所属地域查看）"></a>cosRegion：根据你选择的位置填写。（可从储存桶基本信息所属地域查看）</h3><h3 id="cosSecretId：填写之前创建的密钥id"><a href="#cosSecretId：填写之前创建的密钥id" class="headerlink" title="cosSecretId：填写之前创建的密钥id"></a>cosSecretId：填写之前创建的密钥id</h3><h3 id="cosSecretKey：填写id对应的key"><a href="#cosSecretKey：填写id对应的key" class="headerlink" title="cosSecretKey：填写id对应的key"></a>cosSecretKey：填写id对应的key</h3><h3 id="cosBucket：填写储存同的名称"><a href="#cosBucket：填写储存同的名称" class="headerlink" title="cosBucket：填写储存同的名称"></a>cosBucket：填写储存同的名称</h3><h3 id="cosAppid：填写空间名称中的数字"><a href="#cosAppid：填写空间名称中的数字" class="headerlink" title="cosAppid：填写空间名称中的数字"></a>cosAppid：填写空间名称中的数字</h3><h3 id="注意：cosBucket只填写不带数字的名称，也就是刚开始创建时输入的名称。"><a href="#注意：cosBucket只填写不带数字的名称，也就是刚开始创建时输入的名称。" class="headerlink" title="注意：cosBucket只填写不带数字的名称，也就是刚开始创建时输入的名称。"></a>注意：cosBucket只填写不带数字的名称，也就是刚开始创建时输入的名称。</h3><h3 id="cosAppid则填写你所填名称后面的数字。这两个切记不要填错哦。将上述配置完成后，可以通过"><a href="#cosAppid则填写你所填名称后面的数字。这两个切记不要填错哦。将上述配置完成后，可以通过" class="headerlink" title="cosAppid则填写你所填名称后面的数字。这两个切记不要填错哦。将上述配置完成后，可以通过"></a>cosAppid则填写你所填名称后面的数字。这两个切记不要填错哦。将上述配置完成后，可以通过</h3></li></ul><h3 id="hexo-g-amp-amp-hexo-d测试。如下图，即可点击访问节点访问你的博客啦！"><a href="#hexo-g-amp-amp-hexo-d测试。如下图，即可点击访问节点访问你的博客啦！" class="headerlink" title="hexo g &amp;&amp; hexo d测试。如下图，即可点击访问节点访问你的博客啦！"></a>hexo g &amp;&amp; hexo d测试。如下图，即可点击访问节点访问你的博客啦！</h3><p><img src="/mac-ping-tai-da-jian-shu-yu-zi-ji-de-bo-ke-hexo/16.png" alt=""></p><h3 id="推送成功"><a href="#推送成功" class="headerlink" title="推送成功"></a>推送成功</h3><h3 id="至此，基本配置就结束啦。如果你恰巧财力雄厚有个自己的域名的话，我们可以绑定自己的域名。"><a href="#至此，基本配置就结束啦。如果你恰巧财力雄厚有个自己的域名的话，我们可以绑定自己的域名。" class="headerlink" title="至此，基本配置就结束啦。如果你恰巧财力雄厚有个自己的域名的话，我们可以绑定自己的域名。"></a>至此，基本配置就结束啦。如果你恰巧财力雄厚有个自己的域名的话，我们可以绑定自己的域名。</h3><ul><li>绑定自有域名<h3 id="打开对象储存域名管理，绑定自有域名。"><a href="#打开对象储存域名管理，绑定自有域名。" class="headerlink" title="打开对象储存域名管理，绑定自有域名。"></a>打开对象储存域名管理，绑定自有域名。</h3><img src="/mac-ping-tai-da-jian-shu-yu-zi-ji-de-bo-ke-hexo/17.png" alt=""><h3 id="编辑自定义域名，源站类型选择静态网站源站，做好域名解析，就可通过域名访问啦。此操作仅支持已备案域名。"><a href="#编辑自定义域名，源站类型选择静态网站源站，做好域名解析，就可通过域名访问啦。此操作仅支持已备案域名。" class="headerlink" title="编辑自定义域名，源站类型选择静态网站源站，做好域名解析，就可通过域名访问啦。此操作仅支持已备案域名。"></a>编辑自定义域名，源站类型选择静态网站源站，做好域名解析，就可通过域名访问啦。此操作仅支持已备案域名。</h3></li><li>网站展示：<a href="https://blog.xiaolegun.cn">xiaoleGun</a></li></ul><h2 id="上传Hexo到Github"><a href="#上传Hexo到Github" class="headerlink" title="上传Hexo到Github"></a>上传Hexo到Github</h2><p>在本教程中，我们将会使用 <a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a> 将 Hexo 博客部署到 GitHub Pages 上。Travis CI 对于开源 repository 是免费的，但是这意味着你的站点文件将会是公开的。如果你希望你的站点文件不被公开，请直接前往本文 [私有 Repository](#私有 Repository) 部分。</p><ol><li>新建一个 repository。如果你希望你的站点能通过 <code>&lt;你的 GitHub 用户名&gt;.github.io</code> 域名访问，你的 repository 应该直接命名为 <code>&lt;你的 GitHub 用户名&gt;.github.io</code>。</li><li>将你的 Hexo 站点文件夹推送到 repository 中。默认情况下不应该 <code>public</code> 目录将不会被推送到 repository 中，你应该检查 <code>.gitignore</code> 文件中是否包含 <code>public</code> 一行，如果没有请加上。</li><li>将 <a href="https://github.com/marketplace/travis-ci" target="_blank" rel="noopener">Travis CI</a> 添加到你的 GitHub 账户中。</li><li>前往 GitHub 的 <a href="https://github.com/settings/installations" target="_blank" rel="noopener">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</li><li>你应该会被重定向到 Travis CI 的页面。如果没有，请 <a href="https://travis-ci.com/" target="_blank" rel="noopener">手动前往</a>。</li><li>在浏览器新建一个标签页，前往 GitHub <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">新建 Personal Access Token</a>，只勾选 <code>repo</code> 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</li><li>回到 Travis CI，前往你的 repository 的设置页面，在 <strong>Environment Variables</strong> 下新建一个环境变量，<strong>Name</strong> 为 <code>GH_TOKEN</code>，<strong>Value</strong> 为刚才你在 GitHub 生成的 Token。确保 <strong>DISPLAY VALUE IN BUILD LOG</strong> 保持 <strong>不被勾选</strong> 避免你的 Token 泄漏。点击 <strong>Add</strong> 保存。</li><li>在你的 Hexo 站点文件夹中新建一个 <code>.travis.yml</code> 文件：</li></ol><pre><code class="yml">sudo: falselanguage: node_jsnode_js:  - 10 # use nodejs v10 LTScache: npmbranches:  only:    - master # build master branch onlyscript:  - hexo generate # generate static filesdeploy:  provider: pages  skip-cleanup: true  github-token: $GH_TOKEN  keep-history: true  on:    branch: master  local-dir: public</code></pre><ol start="9"><li>将 <code>.travis.yml</code> 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 <code>gh-pages</code> 分支下</li><li>在 GitHub 中前往你的 repository 的设置页面，修改 <code>GitHub Pages</code> 的部署分支为 <code>gh-pages</code>。</li><li>前往 <code>https://&lt;你的 GitHub 用户名&gt;.github.io</code> 查看你的站点是否可以访问。这可能需要一些时间。</li></ol><h2 id="Project-page"><a href="#Project-page" class="headerlink" title="Project page"></a>Project page</h2><p>如果你更希望你的站点部署在 <code>&lt;你的 GitHub 用户名&gt;.github.io</code> 的子目录中，你的 repository 需要直接命名为子目录的名字，这样你的站点可以通过 <code>https://&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt;</code> 访问。你需要检查你的 Hexo 配置文件，将 <code>url</code> 修改为 <code>https://&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt;</code>、将 <code>root</code> 的值修改为 <code>/&lt;repository 的名字&gt;/</code></p><h2 id="私有-Repository"><a href="#私有-Repository" class="headerlink" title="私有 Repository"></a>私有 Repository</h2><p>下面的指示基于 <a href="/docs/one-command-deployment">一键部署</a> 编写。</p><ol><li><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a>.</p></li><li><p>在 <strong>_config.yml</strong>（如果有已存在的请删除）添加如下配置：</p><pre><code class="yml">deploy: type: git repo: https://github.com/&lt;username&gt;/&lt;project&gt; # example, https://github.com/hexojs/hexojs.github.io branch: gh-pages</code></pre></li><li><p>运行 <code>hexo clean &amp;&amp; hexo deploy</code> 。</p></li><li><p>查看 <em>username</em>.github.io 上的网页是否部署成功。</p></li></ol><h2 id="有用的参考链接"><a href="#有用的参考链接" class="headerlink" title="有用的参考链接"></a>有用的参考链接</h2><ul><li><a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">GitHub Pages 使用文档</a></li><li><a href="https://docs.travis-ci.com/user/tutorial/" target="_blank" rel="noopener">Travis CI 使用文档</a></li><li><a href="https://github.com/hexojs/awesome-hexo" target="_blank" rel="noopener">Awesome Hexo</a></li><li><a href="https://www.baidu.com/s?wd=Hexo%20GitHub" target="_blank" rel="noopener">在百度上搜索 “Hexo GitHub”</a></li></ul><h2 id="到这里了，累死我了，正式收工，本教程完结！"><a href="#到这里了，累死我了，正式收工，本教程完结！" class="headerlink" title="到这里了，累死我了，正式收工，本教程完结！"></a>到这里了，累死我了，正式收工，本教程完结！</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建一个全新的OpenCore</title>
      <link href="/gou-jian-opencore.html"/>
      <url>/gou-jian-opencore.html</url>
      
        <content type="html"><![CDATA[<h1 id="构建OpenCore"><a href="#构建OpenCore" class="headerlink" title="构建OpenCore"></a>构建OpenCore</h1><h2 id="下载OpenCore"><a href="#下载OpenCore" class="headerlink" title="下载OpenCore"></a>下载OpenCore</h2><h3 id="第一个方法"><a href="#第一个方法" class="headerlink" title="第一个方法"></a>第一个方法</h3><p>我们要构建oc第一步先下载OpenCore大家可以选择下载官方正式版，在OCC<a href="https://mackie100projects.altervista.org/download-opencore-configurator/" target="_blank" rel="noopener">OpenCore Configurator</a>这个呢，是民间大神开发出来的非官方OpenCore的编辑工具我们可以使用它来下载正式版的OpenCore。首先我们打开OCC下图是OCC的界面（目前最新版的OCC 1.16.000)<img src="/gou-jian-opencore/1.png" alt=""></p><p>然后我们选择上方状态栏的工具点开<img src="/gou-jian-opencore/2.png" alt=""><br>然后我们选择OpenCore下载器<img src="/gou-jian-opencore/3.png" alt=""><br>我们可以看到上面有现在使用的版本，有现在可用的正式版，也有调试版<img src="/gou-jian-opencore/4.png" alt=""><br>我们选择最新的版本下载，下载位置自己挑选。下载完就可以使用了！！！</p><h3 id="第二个方法"><a href="#第二个方法" class="headerlink" title="第二个方法"></a>第二个方法</h3><p>我这里使用的是第二种方法，这种方法是自己编译的很舒服，可以使用到最新的版本，下面开始我们的教程吧！<br>我们在桌面创建一个文件夹取名叫git，然后我们打开终端输入</p><pre><code class="BASH">cd desktop #这时我们已经进入到桌面了，我们再输入cd git #这一步是进入了我们刚刚创建的文件夹，然后输入git clone https://github.com/acidanthera/OpenCorePkg #之后我们会发现OpenCore已经克隆到了我们的git文件夹</code></pre><p>然后我们打开opencorepkg的文件夹找到里面的一个文件叫macbuild.tool直接托入终端他就会自动开始编译,类似以下界面<br><img src="/gou-jian-opencore/5.png" alt=""><br>等待大约10分钟左右会编译成功（注意有可能在以下界面卡的时间比较久，注意等待！！！）<br><img src="/gou-jian-opencore/6.png" alt=""><br>所有工作都做好后我们会得到一个opencore的压缩包b分为Debug和RELEASE的版本这两个压缩包可以a在以下目录找到<br>Debug:桌面-git-opencorepkg-udk-Build-opencorepkg-DEBUG_XCODE5-X64-OpenCore-0.5.7-DEBUG.zip<br>RELEASE:桌面-git-opencorepkg-udk-Build-opencorepkg-RELEASE_XCODE5-X64-OpenCore-0.5.7-RELEASE.zip<br>然后解压会得到三个文件夹Docs、EFI、Utilities我们进入EFI文件夹里面就是OC了我们进入OC文件夹把你clover的acpi文件放入到oc的acpi文件夹，把clover里的kext驱动放入oc的kexts文件夹，然后返回到之前的三个文件夹点击Docs文件夹里面有两个配置文件分别是Sample.plist和SampleFull.plist我们打开比较完美的SampleFull文件，我们注意一下我们使用OCC编辑（现在最新的occ仅支持最新的0.56正式版的oc所以大家不要下载我的0.57了，请使用occ下载并编辑，如果是大神对自己技术有把握的使用xcode编辑最新的oc（0.57））<br>到了这一步我们的OpenCore就下载完毕了！！！</p><h2 id="编辑-OpenCore"><a href="#编辑-OpenCore" class="headerlink" title="编辑 OpenCore"></a>编辑 OpenCore</h2><p>我们使用OCC打开SampleFull文件,把里面APCI设置全部删除，点击右下角减号删除，再点击左下角浏览把你放入oc-apci文件夹的东西选上，加载顺序自己琢磨吧，如下图所示<img src="/gou-jian-opencore/7.png" alt=""></p><p>我们现在进入booter启动设置,勾上一个叫做DisableVariableWrite的东东，这是给没有原生支持macos读取nvram的主板提供的，可开可不开，支持原生nvram的就不用打开了。如下图所示<img src="/gou-jian-opencore/8.png" alt=""></p><p>我们再来到注入设备设置我们先注入声卡，声卡一般的pci设备只有两个一个是PciRoot(0x0)/Pci(0x1b,0x0)一个是PciRoot(0x0)/Pci(0x1f,0x0)，1b是笔记本常见的pci设备路径，1f是台式机的设备路径，如果不确定两个一个一个尝试，或使用军刀查看pci设备路径，之后在右侧的键值新建一个键填写layout-id值填写你声卡的16进制转换出来的我这里是88,转换出来就是0x58这里还要在后面填上六个零故为58000000，填到值的里面，这样你就得到了你的声卡。如下图所示<img src="/gou-jian-opencore/9.png" alt=""></p><p>显卡我们台式机和笔记本都是PciRoot(0x0)/Pci(0x2,0x0)（注：这是核心显卡）在clover我们知道注入了显卡id就可以驱动显卡部分显卡需要仿冒id如四代显卡。在oc里显卡id就是AAPL,ig-platform-id,需要仿冒id的显卡加一个device-id,我的hd4400的AAPL,ig-platform-id填0600260A,device-id填12040000(注：我们在这里填的需要倒序包括声卡）如下图所示<img src="/gou-jian-opencore/10.png" alt=""></p><p>接下来我们进入内核设置，这里的设置与上方的apci设置相同，唯一注意的是lilu.kext一定放在第一位还有smc仿冒驱动，下图贴上我的驱动图相似的话驱动顺序可以一样。<img src="/gou-jian-opencore/11.png" alt=""></p><p>下面我们进入其它设置misc这里没有什么可以改的唯一的就是要把Security中的Vault改成Optional如下图所示<img src="/gou-jian-opencore/12.png" alt=""></p><p>NVRAM的设置我们没啥改的无非就是启动参数，我就直接贴张图吧！<img src="/gou-jian-opencore/13.png" alt=""></p><p>机型平台啥的自己搞三码，研究研究就全会了我再次贴张我的图<img src="/gou-jian-opencore/14.png" alt="">)<img src="/gou-jian-opencore/15.png" alt=""></p><p>uefi设置根据你编译好的oc文件夹中的Drivers文件夹添加，添加方法如apci设置。如下所示<img src="/gou-jian-opencore/16.png" alt=""></p><p>这篇文章已经接近尾声了，如有不懂得请访问<a href="https://blog.daliansky.net/OpenCore-BootLoader.html" target="_blank" rel="noopener">黑果小兵精解OpenCore</a></p><p>鸣谢：</p><p><a href="https://blog.daliansky.net" target="_blank" rel="noopener">@黑果小兵</a>  精解OpenCore给我提供了很多帮助<br>@天成小爱  我的第一版oc就是这位大佬给我制作的（制作的0.53）<br>@云屋小站  通过他的<a href="https://www.misonsky.cn/115.html" target="_blank" rel="noopener">无需刷BIOS！使用setup_var命令解锁MSR0xE2锁定，修改dvmt值，开启AHCI</a>让我解锁了我笔记本的cfg锁</p><p>再次感谢以上大佬！！！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> OpenCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不用刷BIOS来解锁MSR（CFG）</title>
      <link href="/bu-yong-shua-bios-lai-jie-suo-msr-cfg.html"/>
      <url>/bu-yong-shua-bios-lai-jie-suo-msr-cfg.html</url>
      
        <content type="html"><![CDATA[<p>今天我们来学习不刷BIOS来解锁MSR(CFG)锁，本不想写这篇文章但没啥事干还是写了，而且云屋小站的那篇文章，有可能大部分人看不懂，我尽量把这个教程写的清楚明白一点让各位看的比较爽，但配图我还是借用<a href="https://www.misonsky.cn/115.html" target="_blank" rel="noopener">云屋小站</a>的配图，感谢了！！！下面我们开始我们的教程吧！！！</p><p>我们需要提取BIOS，DELL用户请往下看部分机型BIOS是EXE格式的也需要往下看，如果是BIN或ROM格式的你就跳过吧!(PS:部分的AMI的BIOS可以提取BIOS，可以自己确定。)我下面先讲DELL机型的<br>。</p><p>(注意以下操作在Windows进行)首先进入<a href="https://www.dell.com/support/home/cn/zh/cnbsd1?app=products&amp;~ck=mn" target="_blank" rel="noopener">DELL官网</a>搜索自己的机型并下载EXE文件的BIOS，然后在任意盘符创建一个文件夹，并取名叫做1把EXE格式的BIOS放到这个文件夹并把这个BIOS取名叫做1，然后打开CMD以管理员来运行，输入D:/进入D盘根据你的盘符来选择，之后CD 1进入文件夹，然后在输入1 –writeromfile之后你会发现在1的文件夹中多出一个ROM格式的文件这个就是我们的BIOS了，接下来你们可以跳过了，我要讲解AMI的方法了！！！</p><p>首先在win下载一个软件Universal BIOS Backup ToolKit 2.0.exe<a href="https://www.misonsky.cn/storge/?/resources/无需刷BIOS！使用setup_var命令解锁MSR%200xE2锁定，修改dvmt值，开启AHCI/Universal+BIOS+Backup+ToolKit+2.0.exe" target="_blank" rel="noopener">点我下载</a>下载之后直接提取就ok了<img src="/bu-yong-shua-bios-lai-jie-suo-msr-cfg/1.jpg" alt=""><br>然后你们也会得到一个rom格式的文件。<img src="/bu-yong-shua-bios-lai-jie-suo-msr-cfg/2.jpg" alt=""></p><p>接下来所有人看这里！！！我们现在需要下载一个软件，此软件是UEFITool工具它可以读取BIOS此软件有win、mac、Linux版本，这里我以mac版进行演示，mac版<a href="https://github.com/LongSoft/UEFITool" target="_blank" rel="noopener">点我下载</a></p><p>打开UEFITool软件，菜单栏选择File&gt;Open image file…<img src="/bu-yong-shua-bios-lai-jie-suo-msr-cfg/3.jpg" alt=""><br>选择你的rom格式的bios文件或bin格式然后会出现以下界面<img src="/bu-yong-shua-bios-lai-jie-suo-msr-cfg/4.jpg" alt="">同时按下alt+F（我这里是PS2键盘，如果你是USB键盘，那就按Win+F）打开搜索框，选择Text，输入CFG Lock，点OK。<img src="/bu-yong-shua-bios-lai-jie-suo-msr-cfg/5.jpg" alt=""><br>得到如下信息<img src="/bu-yong-shua-bios-lai-jie-suo-msr-cfg/6.jpg" alt="">双击这条信息，软件会自动定位到含有CFG Lock信息的模块。<img src="/bu-yong-shua-bios-lai-jie-suo-msr-cfg/7.jpg" alt=""><br>右键该模块，选择extractbody，提取出该模块。<br><img src="/bu-yong-shua-bios-lai-jie-suo-msr-cfg/8.png" alt=""> <img src="/bu-yong-shua-bios-lai-jie-suo-msr-cfg/9.jpg" alt=""><br>接下来，我们需要把该模块转换成我们能读懂的信息。我们需要借助ifrextract这个工具。官网点我打开，<a href="https://www.misonsky.cn/storge/?/resources/无需刷BIOS！使用setup_var命令解锁MSR%200xE2锁定，修改dvmt值，开启AHCI/ifrextract_v0.3.6.osx.zip" target="_blank" rel="noopener">点我下载</a>。把上面提取出来的模块更名为1.bin（为了方便操作），把ifrextract文件放到桌面上。打开终端，依次执行以下操作：cd ~/desktop 进入桌面这个目录。转换信息 ./ifrextract 1.bin 1.txt <img src="/bu-yong-shua-bios-lai-jie-suo-msr-cfg/10.jpg" alt=""><br>这样，我们会看到桌面上生成了一个叫1.txt的文件，里面就是转换出来的我们能读懂的BIOS模块信息。<img src="/bu-yong-shua-bios-lai-jie-suo-msr-cfg/11.jpg" alt=""></p><h2 id="寻找需要的偏移量"><a href="#寻找需要的偏移量" class="headerlink" title="寻找需要的偏移量"></a>寻找需要的偏移量</h2><p>打开上一步转换出来的1.txt文件，同时按下alt+F（这是ps2键盘的，USB键盘使用Win+F），输入我们想要修改的东西名称进行查找。例如，我们想要解锁MSR 0xE2，那就输入CFG Lock进行搜索<img src="/bu-yong-shua-bios-lai-jie-suo-msr-cfg/12.jpg" alt="">提取整理出有用的信息：</p><p>One Of: CFG lock, VarStoreInfo(VarOffset/VarName): 0x62, VarStore: 0x1<br>One Of Option: Disabled, Value (8 bit): 0x0<br>One Of Option: Enabled, Value (8 bit): 0x1</p><p>其中，VarStoreInfo值以及Option中的Value值就是我们要找的。VarStoreInfo值是CFG Lock这个选项的地址，也可以说其在BIOS中的偏移量。后面的VarStore是当前值（BIOS默认值），为0x1      0x1对应下面的Option里就是Enabled，意思就是CFGLock这个选择默认被打开了，也就是说MSR 0xE2默认被锁定了。而我们想要解锁它就需要把该选择修改成0x0的Disabled，就是要把0x62这个地址上的数值修改为0x0</p><h2 id="修改BIOS隐藏设置"><a href="#修改BIOS隐藏设置" class="headerlink" title="修改BIOS隐藏设置"></a>修改BIOS隐藏设置</h2><p>要修改BIOS隐藏设置，我们需要在UEFI shell里使用setup_var命令。datasone修改了一份支持setup_var命令的grub引导，我们可以借助这个工具。项目<a href="https://www.misonsky.cn/storge/?/resources/无需刷BIOS！使用setup_var命令解锁MSR%200xE2锁定，修改dvmt值，开启AHCI/modGRUBShell.efi" target="_blank" rel="noopener">点我下载</a>使用磁盘工具，把U盘抹掉，方案用主引导记录，格式选择MS-DOS（FAT）然后在U盘分区里新建一个EFI文件夹，EFI文件夹里新建一个BOOT文件夹，把下载的modGRUBShell.efi更名为BOOTX64.efi，放入BOOT文件夹里面。就这样，一个支持setup_var命令的grub引导启动盘就制作完成了。进BIOS里设置第一启动项为U盘（UEFI模式启动）。启动grub后，我们可以开始使用setup_var命令了。</p><p>我们开始来解锁MSR 0xE2输入:<br>setup_var_3 0x62<br>该命令是查询0x62这个地址（偏移量）的数值，0x62是我们在上面一步中查找到的CFG-Lock选项的地址，从下图中我们可以看到该0x62地址数值为0x01，即对应Enabled。<img src="/bu-yong-shua-bios-lai-jie-suo-msr-cfg/13.jpg" alt=""><br>输入:<br>setup_var_3 0x62 0x00<br>该命令是修改0x62这个地址的数值为0x00，也就是把CFG-Lock这个选项设置为Disabled。<img src="/bu-yong-shua-bios-lai-jie-suo-msr-cfg/14.jpg" alt=""></p><p>每一个BIOS的设置选项地址（偏移量）都是不一样的，不检查BIOS设置地址而直接使用setup_var命令修改是十分危险的事情！！！！！！！！！！！！！！！！！一点要注意！！！！</p><h2 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a>验证结果</h2><p>setup_var命令执行完毕后，我们怎么知道命令是否生效了呢？<br>其实不难，只要使用一些辅助软件看一下即可。<br>例如，CFG-Lock这个选项，我们可以在Mac里使用AppleIntelInfo驱动打印CPU相关状态信息，Hackintool工具已经集成了该驱动，所以我们可以很方便地获取相关信息。<img src="/bu-yong-shua-bios-lai-jie-suo-msr-cfg/15.jpg" alt=""><br>由上图可知，CFG-Lock已经成功解锁了。那么，你就可以删掉KernelPM补丁（Haswell+）或AppleIntelCPUPM（Haswell以前的）补丁，直接使用原生电源管理了。（Tips：用以防止开启HWP后奔溃的MSR_0xE2__xcpm_idle_instant_reboot内核补丁也不再需要了哦！）</p><p>各位朋友们到了这一步我们的MSR（CFG）就已经解锁成功了！！！大家以后可以抛弃一些补丁了！！我制作的镜像马上就会发布在我的博客上！希望大家多多的支持并鼓励我！！拜拜！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>精解OpenCore</title>
      <link href="/opencore.html"/>
      <url>/opencore.html</url>
      
        <content type="html"><![CDATA[<p>欢迎大家来到我的博客,你们在这里会学到很多关于黑苹果的知识。我的博客有很多借鉴前辈的教程，欢迎大家去访问他们的博客<a href="https://blog.daliansky.net/" target="_blank" rel="noopener">黑果小兵的部落阁</a>兵叔有很多综合性教程适合小白，各位可以看兵叔的帖子。 <a href="https://blog.xjn819.com/" target="_blank" rel="noopener">Xin’s大佬的blog</a>Xin大佬的教程都是针对OpenCore写的所以想了解OC的朋友推荐看Xin大佬的帖子因为本人比较喜欢使用OpenCore所以下面的教程按照OC的方式安装。</p><h1 id="OpenCore"><a href="#OpenCore" class="headerlink" title="OpenCore"></a>OpenCore</h1><h2 id="什么是OpenCore"><a href="#什么是OpenCore" class="headerlink" title="什么是OpenCore"></a>什么是OpenCore</h2><p>OpenCore<a href="">(简称 OC)</a>是一个着眼于未来开源引导工具, 最初诞生于 HermitCrabs 实验室, 现在接手于 Acidanthera, 其目的是创造一个更加严谨的模组化的轻量引导系统。尽管 OpenCore 的主要用途是黑苹果, 它也支持其它操作系统的引导。</p><p>OpenCore 现在处于公测 Beta 阶段, 引导相关功能也已非常稳定, 喜欢折腾的朋友现在已经是动手的时机了。</p><p>这个教程只能作为你探索的起点。请仔细阅读并时刻牢记你的硬件可能有不同的配置要求。<br><a href="https://github.com/acidanthera/OpenCorePkg/blob/master/Docs/Configuration.pdf" target="_blank" rel="noopener">OC官方文档</a>– OpenCore 最权威的资料, 没有之一!!!</p><h2 id="为什么选择-OpenCore"><a href="#为什么选择-OpenCore" class="headerlink" title="为什么选择 OpenCore?"></a>为什么选择 OpenCore?</h2><p>   1.从 2019 年 9 月以后, <a href="">Acidanthera</a> 开发的内核驱动 (Lilu, AppleALC 等等) 「不再会」 在 Clover 上做兼容性测试<br>   2.OpenCore 更加注重系统的安全性, 提供对 OpenCore 自身引导文件对加密, 同时对文件保险箱 (FileVault) 有更强大的支持, 在未来会支持 UEFI 安全启动<br>   3.OpenCore 启动 FileVault (硬盘保险箱) 加密的分区速度远超 Clover<br>   4.OpenCore 支持基于 [boot.efi] 的原生开机快捷键支持<br>   5.OpenCore 使用更加先进的方法注入第三方内核扩展驱动 (Kext) 且与此同时不会破坏系统完整性保护<br>   6.OpenCore 通过读取启动磁盘设置的 NVRAM 变量, 可以像白苹果一样支持在设置的启动磁盘切换默认引导项<br>   7.支持给其它 .efi 驱动或引导工具加入参数<br>   8.如下 UEFI 驱动被合并入 OpenCore, 未来的开发直接与 OpenCore 绑定, 且不再支持 Clover<br>    AptioMemoryFix<br>    已经被合并入 OpenCore 并将未合并的模组更名为 FwRuntimeVariable.efi, 提供更多可按需求定制 Slide 值计算的 Quirk</p><p>   AppleGenericInput<br>   (原来的 AptioInputFix) 为了提高兼容性和 ALT / Command 键的对调已经合并入 OpenCore 并增加了更多的 Quirk</p><p>   AppleUiSupport<br>   为了提供更好的 FileVault 体验, 已合并入 OpenCore 并增加了更多的 Quirk### Generate static files</p><h2 id="OpenCore-常见疑问"><a href="#OpenCore-常见疑问" class="headerlink" title="OpenCore 常见疑问"></a>OpenCore 常见疑问</h2><h3 id="1-OpenCore-没有精美的主题-以后会添加吗"><a href="#1-OpenCore-没有精美的主题-以后会添加吗" class="headerlink" title="1.OpenCore 没有精美的主题, 以后会添加吗?"></a>1.OpenCore 没有精美的主题, 以后会添加吗?</h3><p>   可能但是短时间内不会有, OpenCore 的开发成员 vit9696 已经声明不会开发官方主题, 但是保留了<br>   GUI 接口, 其他开发者可以自己制作<br>   OpenCore 自带的 GUI 仅用于 debug, 设计初衷是在正常使用的时像白苹果一样隐藏。<br>    其实 OpenCore 已经提供了大量可以绕开 GUI 的功能, 将 <a href="">ShowPicker</a> 设置为 NO<br>    隐藏菜单之后,可以通过系统自带的启动磁盘设置来切换默认系统, 用苹果原生快捷键来重置<br>    NVRAM 和添加引导表示符, 需要其它功能的时候可以随时按 <a href="">ESC/Option</a> 调出,<br>    主题存在的意义不大</p><h3 id="2-OpenCore-为什么不会为其它操作系统忽略-ACPI-补丁"><a href="#2-OpenCore-为什么不会为其它操作系统忽略-ACPI-补丁" class="headerlink" title="2.OpenCore 为什么不会为其它操作系统忽略 ACPI 补丁?"></a>2.OpenCore 为什么不会为其它操作系统忽略 ACPI 补丁?</h3><p>   真正正确的 ACPI (DSDT/SSDT) 应当适用于所有的操作系统, 单独为一个操作系统制作 ACPI<br>   是不合理的, 因此 OpenCore 基于 ACPI 标准, 不会在 ACPI 上区别对待操作系统, (OpenCore<br>   ACPI 教程正在施工中, 敬请期待)</p><h3 id="3-OpenCore-的配置为什么看起来这复杂"><a href="#3-OpenCore-的配置为什么看起来这复杂" class="headerlink" title="3.OpenCore 的配置为什么看起来这复杂?"></a>3.OpenCore 的配置为什么看起来这复杂?</h3><p>  OpenCore 为了提高兼容性, 为用户开放了更多底层的 Quirk<br>  OpenCore 现阶段没有可用的非常直观的 GUI 编辑器</p><p>  <a href="">PS:换位思考, 如果用 Xcode 来编辑 Clover 安装包内自带的 Config 样本, 显然 OpenCore 会更简单<br>  OpenCore 很多功能都有且只有一处设置, 但是 Clover 有大量等效组合互相干扰</a></p><pre><code>                         更新2020年2月28日</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到xiaoleGun&#39;Blog</title>
      <link href="/huan-ying-lai-dao-xiaolegun-de-bo-luo-ge.html"/>
      <url>/huan-ying-lai-dao-xiaolegun-de-bo-luo-ge.html</url>
      
        <content type="html"><![CDATA[<p>欢迎大家来到我的博客,你们在这里会学到很多关于黑苹果的知识。我的博客有很多借鉴前辈的教程，欢迎大家去访问他们的博客<a href="https://blog.daliansky.net/" target="_blank" rel="noopener">黑果小兵的部落阁</a>兵叔有很多综合性教程适合小白，各位可以看兵叔的帖子。 <a href="https://blog.xjn819.com/" target="_blank" rel="noopener">Xin’s大佬的blog</a>Xin大佬的教程都是针对OpenCore写的所以想了解OC的朋友推荐看Xin大佬的帖子因为本人比较喜欢使用OpenCore所以下面的教程按照OC的方式介绍。</p><p>首先介绍下我，我从2019年2月份左右玩到了凤凰OS看着不错应用很多大多数都是只兼容手机版的，但我最喜欢的软件就是《抖音》了大屏刷抖音简直爽的一批。但好景不长，这个系统用用就蓝屏死机等等一系列的Bug着实让我头疼后来有幸接触到了Linux让我体验到前所未有的流畅但是没过多久就弃用了它又转回Windows了，偶然的一天看到了一个视频<a href="https://www.bilibili.com/video/av41123688" target="_blank" rel="noopener">@草鸡实验室</a>因为这条视频让我萌生了安装黑苹果的想法于是我在<a href="www.baidu.com">百度</a>搜到了很多关于黑苹果的资料，其中给我帮助最大的Blog是<a href="https://blog.daliansky.net/" target="_blank" rel="noopener">黑果小兵的部落阁</a>这是兵叔的博客，在私底下我跟他交流了很多关于仿冒声卡的问题。现在得益于各大网站的帮助让我的黑苹果已经很完美了，但唯一一个的缺陷即耳麦(耳机麦克风)无法正常工具，这也是我学习声卡仿冒的原因，但我在Linux系统提取出了声卡路径和声卡节点，并稍做修改，放到<a href="https://github.com/acidanthera/AppleALC" target="_blank" rel="noopener">AppleALC</a>这是在Hackintosh下的声卡驱动，当然还有另一种<a href="https://sourceforge.net/projects/voodoohda/" target="_blank" rel="noopener">VooDooHDA</a>这是在Hackintosh的万能声卡驱动优点很多同时缺点很明显，优点呢就是不需要人工制作ID，不需要提取路径和节点，它可以自己寻找节点和路径从而驱动声卡，大部分声卡都可以通过它来驱动，缺点是开关机有可能有爆音，声音小，音质差等等一系列的缺点（PS：本作者未否认部分通过AppleALC驱动的机型有以上的情况，但当然这只是部分。哎呀，不小心又偏题了！！！我们继续说关于我的耳麦吧，我修改了AppleALC并编译，把它放到了OC-kexts里面并在config加入AppleALC，重启之后发现它驱动的很好但是耳麦依然没有驱动，虽然有了音频输入但是没有电平这让我很苦恼后来联系了兵叔他让我试试ComboJack的方法XPS9560就是这样解决的，但我没有编程的基础让我无从下手，兵叔只是语重深长地给了我一句话，”所以说还是要多学习”但对于编程让我感觉很烦躁面对那些英文单词我只能叹一口气，唉，又跑题了。。。我下载了XPS9560 ComboJack的源码看了看不会用，我太难了，算了不水文章了(虽然这是我的第一篇文章我还是想水，我太难了。。。)</p><p>在这里我还会发布很多的镜像是Clover/OC/WinPE三合一的镜像让大家想用哪个就用哪个，但在这里提醒使用OC的朋友们希望大家解一下CFG的BIOS锁解CFG锁推荐<a href="https://www.misonsky.cn/115.html" target="_blank" rel="noopener">云屋小站</a>这篇文章不用刷BIOS只是单纯提取BIOS、寻找偏移量、制作一个可以引导grub的u盘输入几条指令就好了。在此求求您们了！！！要不然我加两个多余的选项我真的很烦，那两个选项开启之后虽然你们可以不解CFG但是丧失了原生电源管理，所以跪谢你们了谢谢谢谢，以后我还会考虑发布两个版本一个是针对intel的用户们，一个是针对AMD的用户（PS：AMD的用户不用担心CFG的问题谁让你们主板没得这个锁，还有你们的系统不稳定，PR、PS、LR、AE打不开都属于正常的现象需要自己多爬楼多摸索，后续我会再次考虑考虑解决Adobe公司软件打不开的解决办法，请各位AMD的读客们耐心等待吧……)</p><p>好了关于我的事情就介绍到这里了，拜拜下面是我的Blog的介绍！！！</p><p>各位读客们，我的Blog现在非常简陋而我也不会美化，在此放上我的QQ/微信：1592501605   电话：18513153507  邮箱：<a href="mailto:1592501605@qq.com">1592501605@qq.com</a>希望大家有好的创意加我q或微信提交给我，当然也可以发邮箱但我一个月只看一回，现在我的标签和分类不咋会使用我也很烦。跪求各位帮我看看我的blog并完善，</p><p>我的blog现在搜索功能正常，我也加入了aplayer音乐播放器的功能有可能只有电脑可以正常使用，手机不行在右下角点击三横杠就有音乐播放器了。。。想听自己的歌单的话给我往qq或微信说一下吧，我统计开放歌单id的功能。就先这样吧，拜拜，宅在家太烦了，在此由衷的感谢各位给我的支持与帮助，相信我以后会创作出更优质的文章，但是该水的还是得水！！！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
